{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johnlimkeman/Desktop/Projects/weatherApp/weather-app/src/App.js\";\nimport React, { Component } from 'react';\nconst api = {\n  key: \"fd25d9fc51079308797eba529304b260\",\n  base: \"api.openweathermap.org/data/2.5/\"\n};\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst fetchWeather = evt => {\n  if (evt.key === \"Enter\") {\n    console.log(this.state.city);\n    fetch(`${api.base}weather?q=${this.state.city}&units=metric&APPID=${api.key}`).then(res => res.json()).then(result => {\n      this.setState({\n        weather: result\n      });\n      console.log(result);\n    });\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weather: [],\n      city: \"New York City\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app sunny\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-box\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date\",\n            children: dateBuilder(new Date())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location\",\n          children: this.state.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search\",\n          placeholder: \"Search Area\",\n          onChange: e => this.setState({\n            city: e.target.value\n          }),\n          onKeyPress: fetchWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/johnlimkeman/Desktop/Projects/weatherApp/weather-app/src/App.js"],"names":["React","Component","api","key","base","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","fetchWeather","evt","console","log","state","city","fetch","then","res","json","result","setState","weather","App","constructor","render","Date","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,MAAMC,GAAG,GAAG;AACVC,EAAAA,GAAG,EAAE,kCADK;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAZ;;AAIA,MAAMC,WAAW,GAAIC,CAAD,IAAO;AACzB,MAAIC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAb;AACA,MAAIC,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAX;AAEA,MAAIC,GAAG,GAAGD,IAAI,CAACF,CAAC,CAACI,MAAF,EAAD,CAAd;AACA,MAAIC,IAAI,GAAGL,CAAC,CAACM,OAAF,EAAX;AACA,MAAIC,KAAK,GAAGN,MAAM,CAACD,CAAC,CAACQ,QAAF,EAAD,CAAlB;AACA,MAAIC,IAAI,GAAGT,CAAC,CAACU,WAAF,EAAX;AAEA,SAAQ,GAAEP,GAAI,KAAIE,IAAK,IAAGE,KAAM,IAAGE,IAAK,EAAxC;AAED,CAXD;;AAYA,MAAME,YAAY,GAAIC,GAAD,IAAS;AAC5B,MAAIA,GAAG,CAACf,GAAJ,KAAY,OAAhB,EAAyB;AACvBgB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,IAAvB;AACAC,IAAAA,KAAK,CAAE,GAAErB,GAAG,CAACE,IAAK,aAAY,KAAKiB,KAAL,CAAWC,IAAK,uBAAsBpB,GAAG,CAACC,GAAI,EAAvE,CAAL,CACGqB,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,MAAM,IAAI;AACd,WAAKC,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAEF;AAAV,OAAd;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACD,KALH;AAMH;AACA,CAVD;;AAWA,MAAMG,GAAN,SAAkB7B,SAAlB,CAA4B;AAC5B8B,EAAAA,WAAW,GAAE;AACX;AACA,SAAKV,KAAL,GAAa;AACXQ,MAAAA,OAAO,EAAE,EADE;AAEXP,MAAAA,IAAI,EAAE;AAFK,KAAb;AAKD;;AAEDU,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,sBAAuB3B,WAAW,CAAE,IAAI4B,IAAJ,EAAF;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAII;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBAA2B,KAAKZ,KAAL,CAAWC;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAOE;AACA,UAAA,IAAI,EAAC,MADL;AAEA,UAAA,SAAS,EAAC,QAFV;AAGA,UAAA,WAAW,EAAC,aAHZ;AAIA,UAAA,QAAQ,EAAEY,CAAC,IAAI,KAAKN,QAAL,CAAc;AAACN,YAAAA,IAAI,EAAEY,CAAC,CAACC,MAAF,CAASC;AAAhB,WAAd,CAJf;AAKA,UAAA,UAAU,EAAEnB;AALZ;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA9B2B;;AAgC5B,eAAea,GAAf","sourcesContent":["import React, {Component} from 'react';\n\nconst api = {\n  key: \"fd25d9fc51079308797eba529304b260\",\n  base: \"api.openweathermap.org/data/2.5/\"\n}\nconst dateBuilder = (d) => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`\n\n}\nconst fetchWeather = (evt) => {\n  if (evt.key === \"Enter\") {\n    console.log(this.state.city)\n    fetch(`${api.base}weather?q=${this.state.city}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        this.setState({weather: result});\n        console.log(result);\n      });\n}\n}\nclass App extends Component {\nconstructor(){\n  super();\n  this.state = {\n    weather: [],\n    city: \"New York City\"\n\n  }\n}\n\nrender(){\n  return (\n    <div className=\"app sunny\">\n      <main>\n        <div className=\"date-box\">\n          <div className='date'>{dateBuilder (new Date())}</div>\n        </div>\n          <div className='location'>{this.state.city}</div>\n\n\n        <input\n        type=\"text\"\n        className=\"search\"\n        placeholder=\"Search Area\"\n        onChange={e => this.setState({city: e.target.value})}\n        onKeyPress={fetchWeather}\n        />\n      </main>\n    </div>\n  );\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}