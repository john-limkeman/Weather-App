{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johnlimkeman/Desktop/Projects/weather-app/src/App.js\";\nimport React, { Component } from 'react';\nconst api = {\n  key: \"ydl111Po8y1V7xflRs131Rgcis7HFf1O\",\n  base: \"https://data.climacell.co/v4/timelines?location=13.2%2C84.2&fields=weatherCode&fields=temperature&timesteps=1h&units=metric&apikey=ydl111Po8y1V7xflRs131Rgcis7HFf1O\"\n};\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month}, ${year}`;\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weather: [],\n      location: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://data.climacell.co/v4/timelines?location=14.2%2C87.4&fields=weatherCode&fields=temperature&timesteps=1h&units=metric&apikey=ydl111Po8y1V7xflRs131Rgcis7HFf1O\", {\n      \"method\": \"GET\",\n      \"headers\": {}\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        weather: data\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app sunny\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date\",\n            children: dateBuilder(new Date())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location\",\n            children: \" Chicago, IL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search\",\n          placeholder: \"Search Area\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/johnlimkeman/Desktop/Projects/weather-app/src/App.js"],"names":["React","Component","api","key","base","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","App","state","weather","location","componentDidMount","fetch","then","res","json","data","setState","catch","console","log","render","Date"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,MAAMC,GAAG,GAAG;AACVC,EAAAA,GAAG,EAAE,kCADK;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAZ;;AAIA,MAAMC,WAAW,GAAIC,CAAD,IAAO;AACzB,MAAIC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAb;AACA,MAAIC,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAX;AAEA,MAAIC,GAAG,GAAGD,IAAI,CAACF,CAAC,CAACI,MAAF,EAAD,CAAd;AACA,MAAIC,IAAI,GAAGL,CAAC,CAACM,OAAF,EAAX;AACA,MAAIC,KAAK,GAAGN,MAAM,CAACD,CAAC,CAACQ,QAAF,EAAD,CAAlB;AACA,MAAIC,IAAI,GAAGT,CAAC,CAACU,WAAF,EAAX;AAEA,SAAQ,GAAEP,GAAI,KAAIE,IAAK,IAAGE,KAAM,KAAIE,IAAK,EAAzC;AAED,CAXD;;AAYA,MAAME,GAAN,SAAkBhB,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BiB,KAF0B,GAElB;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAFkB;AAAA;;AAQ1BC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,qKAAD,EAAwK;AAC3K,gBAAU,KADiK;AAE3K,iBAAW;AAFgK,KAAxK,CAAL,CAICC,IAJD,CAIMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJb,EAKCF,IALD,CAKOG,IAAD,IAAU;AACd,WAAKC,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAEO;AAAX,OAAd;AACD,KAPD,EAQCE,KARD,CAQOC,OAAO,CAACC,GARf;AASD;;AACHC,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,sBAAuB1B,WAAW,CAAE,IAAI2B,IAAJ,EAAF;AAAlC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AACA,UAAA,IAAI,EAAC,MADL;AAEA,UAAA,SAAS,EAAC,QAFV;AAGA,UAAA,WAAW,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AArC2B;;AAuC5B,eAAef,GAAf","sourcesContent":["import React, {Component} from 'react';\nconst api = {\n  key: \"ydl111Po8y1V7xflRs131Rgcis7HFf1O\",\n  base: \"https://data.climacell.co/v4/timelines?location=13.2%2C84.2&fields=weatherCode&fields=temperature&timesteps=1h&units=metric&apikey=ydl111Po8y1V7xflRs131Rgcis7HFf1O\"\n}\nconst dateBuilder = (d) => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month}, ${year}`\n\n}\nclass App extends Component {\n\n  state = {\n    weather: [],\n    location: []\n\n  }\n\n  componentDidMount() {\n    fetch(\"https://data.climacell.co/v4/timelines?location=14.2%2C87.4&fields=weatherCode&fields=temperature&timesteps=1h&units=metric&apikey=ydl111Po8y1V7xflRs131Rgcis7HFf1O\", {\n      \"method\": \"GET\",\n      \"headers\": {}\n    })\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ weather: data })\n    })\n    .catch(console.log)\n  }\nrender(){\n  return (\n    <div className=\"app sunny\">\n      <main>\n        <div className=\"location-box\">\n          <div className='date'>{dateBuilder (new Date())}</div>\n          <div className='location'> Chicago, IL</div>\n        </div>\n\n\n        <input\n        type=\"text\"\n        className=\"search\"\n        placeholder=\"Search Area\"\n        />\n      </main>\n    </div>\n  );\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}