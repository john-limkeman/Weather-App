{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/johnlimkeman/Desktop/Projects/weatherApp/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nconst api = {\n  key: \"fd25d9fc51079308797eba529304b260\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nfunction App() {\n  _s();\n\n  // const [background, setBackground] = useState('');\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState({\n    \"coord\": {\n      \"lon\": -74.006,\n      \"lat\": 40.7143\n    },\n    \"weather\": [{\n      \"id\": 804,\n      \"main\": \"Clouds\",\n      \"description\": \"overcast clouds\",\n      \"icon\": \"04d\"\n    }],\n    \"base\": \"stations\",\n    \"main\": {\n      \"temp\": 41.29,\n      \"feels_like\": 31.19,\n      \"temp_min\": 37.99,\n      \"temp_max\": 46,\n      \"pressure\": 1015,\n      \"humidity\": 81\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n      \"speed\": 12.66,\n      \"deg\": 30\n    },\n    \"clouds\": {\n      \"all\": 90\n    },\n    \"dt\": 1610730111,\n    \"sys\": {\n      \"type\": 1,\n      \"id\": 4610,\n      \"country\": \"US\",\n      \"sunrise\": 1610713063,\n      \"sunset\": 1610747576\n    },\n    \"timezone\": -18000,\n    \"id\": 5128581,\n    \"name\": \"New York\",\n    \"cod\": 200\n  });\n  const [temp, setTemp] = useState('');\n  const [currentCondition, setCurrentCondition] = useState('');\n\n  const fetchWeather = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${city}&units=imperial&APPID=${api.key}`).then(res => res.json()).then(result => {\n        setWeather(result);\n        setCity('');\n\n        if (typeof weather.main != \"undefined\") {\n          setTemp(weather.main.temp);\n          setCurrentCondition(weather.weather[0].main);\n        } else {\n          setTemp('75');\n          setCurrentCondition('Sunny with a high of');\n          getBackground('Clear');\n        }\n\n        ;\n        console.log({\n          weather\n        });\n      });\n    }\n  };\n\n  const getBackground = c => {\n    if (c === \"Clear\") {\n      return 'app sunny';\n    } else if (c === \"Clouds\") {\n      if (typeof weather.main != \"undefined\" && weather.weather[0].id > 802) {\n        return 'app cloudy';\n      } else {\n        return 'app partlyCloudy';\n      }\n    } else if (c === \"Rain\" || c === \"Drizzle\") {\n      if (typeof weather.main != \"undefined\" && weather.main.temp > 55) {\n        return 'app warmRain';\n      } else {\n        return 'app coldRain';\n      }\n    } else if (c === \"Thunderstorm\") {\n      return 'app thunder';\n    } else if (c === \"Snow\") {\n      return 'app snow';\n    } else return 'app fog';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: typeof weather.main != \"undefined\" ? getBackground(weather.weather[0].main) : 'app sunny',\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date\",\n          children: dateBuilder(new Date())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location\",\n          children: weather.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"temp\",\n          children: [Math.round(temp), \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conditions\",\n          children: currentCondition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search\",\n        placeholder: \"Search City\",\n        onChange: e => setCity(e.target.value),\n        value: city,\n        onKeyPress: fetchWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ogADBm4pqwd4rq973jXOOO+8nuU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/johnlimkeman/Desktop/Projects/weatherApp/weather-app/src/App.js"],"names":["React","useState","api","key","base","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","App","city","setCity","weather","setWeather","temp","setTemp","currentCondition","setCurrentCondition","fetchWeather","evt","fetch","then","res","json","result","main","getBackground","console","log","c","id","Date","name","Math","round","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nconst api = {\n  key: \"fd25d9fc51079308797eba529304b260\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nconst dateBuilder = (d) => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`\n\n}\n\nfunction App() {\n  // const [background, setBackground] = useState('');\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState({\n    \n    \"coord\": {\n      \"lon\": -74.006,\n      \"lat\": 40.7143\n    },\n    \"weather\": [\n      {\n        \"id\": 804,\n        \"main\": \"Clouds\",\n        \"description\": \"overcast clouds\",\n        \"icon\": \"04d\"\n      }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n      \"temp\": 41.29,\n      \"feels_like\": 31.19,\n      \"temp_min\": 37.99,\n      \"temp_max\": 46,\n      \"pressure\": 1015,\n      \"humidity\": 81\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n      \"speed\": 12.66,\n      \"deg\": 30\n    },\n    \"clouds\": {\n      \"all\": 90\n    },\n    \"dt\": 1610730111,\n    \"sys\": {\n      \"type\": 1,\n      \"id\": 4610,\n      \"country\": \"US\",\n      \"sunrise\": 1610713063,\n      \"sunset\": 1610747576\n    },\n    \"timezone\": -18000,\n    \"id\": 5128581,\n    \"name\": \"New York\",\n    \"cod\": 200\n    \n  });\n  const [temp, setTemp] = useState('');\n  const [currentCondition, setCurrentCondition] = useState('');\n\n  \n  const fetchWeather = (evt) => {\n    if (evt.key === \"Enter\") { \n      fetch(`${api.base}weather?q=${city}&units=imperial&APPID=${api.key}`)\n      .then(res =>\n        res.json())\n        .then(result => {\n          setWeather(result);\n          setCity('');\n          if (typeof weather.main != \"undefined\"){\n          setTemp(weather.main.temp);\n          setCurrentCondition(weather.weather[0].main);\n          } else {\n            setTemp('75');\n            setCurrentCondition('Sunny with a high of');\n            getBackground('Clear');\n          };\n          console.log({weather});\n          \n        });\n        \n      }\n    };\n      const getBackground = (c) =>  {\n        if (c === \"Clear\"){\n          return 'app sunny';\n        } else if( c === \"Clouds\"){\n          if (typeof weather.main != \"undefined\" && weather.weather[0].id > 802){\n            return 'app cloudy';\n          } else {\n            return 'app partlyCloudy';\n          }\n        }else if(c === \"Rain\" || c === \"Drizzle\"){\n          if (typeof weather.main != \"undefined\" && weather.main.temp > 55){\n            return 'app warmRain'\n          } else {\n          return 'app coldRain';\n          }\n        }else if(c === \"Thunderstorm\"){\n          return 'app thunder';\n        }else if(c === \"Snow\"){\n          return 'app snow';\n        } else return 'app fog'\n      };\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? getBackground (weather.weather[0].main) : 'app sunny'}>\n      <main>\n        <div className=\"date-box\">\n          <div className='date'>{dateBuilder (new Date())}</div>\n        </div>\n        <div className=\"weather-box\">\n          <div className='location'>{weather.name}</div>\n          <div className=\"temp\">{Math.round(temp)}°</div>\n          <div className=\"conditions\" >{currentCondition}</div>\n        </div>\n\n\n        <input\n        type=\"text\"\n        className=\"search\"\n        placeholder=\"Search City\"\n        onChange={e => setCity(e.target.value)}\n        value={city}\n        onKeyPress={fetchWeather}\n        />\n      </main>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}